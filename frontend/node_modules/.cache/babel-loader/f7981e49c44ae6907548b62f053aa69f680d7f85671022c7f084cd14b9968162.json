{"ast":null,"code":"var _jsxFileName = \"/Users/kapoor/Desktop/bkk/GITHUB README GENRATOR/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// The URL of your backend API. Change this if your backend is deployed elsewhere.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8000';\nfunction App() {\n  _s();\n  const [repoUrl, setRepoUrl] = useState('');\n  const [taskId, setTaskId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [result, setResult] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Use a ref to hold the interval ID\n  const intervalRef = useRef(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setResult('');\n    setTaskId(null);\n    setIsLoading(true);\n    setStatus('Submitting job...');\n    try {\n      const response = await fetch(`${API_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          repo_url: repoUrl\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to start the generation job.');\n      }\n      const data = await response.json();\n      setTaskId(data.task_id);\n      setStatus('Job submitted. Waiting for progress...');\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      setStatus('Idle');\n    }\n  };\n  const checkStatus = async () => {\n    if (!taskId) return;\n    try {\n      const response = await fetch(`${API_URL}/status/${taskId}`);\n      if (!response.ok) {\n        // Try to extract error message from response\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to fetch status.');\n      }\n      const data = await response.json();\n      setStatus(`Job Status: ${data.status}`);\n      if (data.status === 'SUCCESS') {\n        setResult(data.result);\n        setIsLoading(false);\n        clearInterval(intervalRef.current); // Stop polling\n      } else if (data.status === 'FAILURE') {\n        setError((data === null || data === void 0 ? void 0 : data.error) || 'Job failed. Please check the backend logs.');\n        setIsLoading(false);\n        clearInterval(intervalRef.current); // Stop polling\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to fetch status.');\n      setIsLoading(false);\n      clearInterval(intervalRef.current); // Stop polling on error\n    }\n  };\n\n  // useEffect hook to start polling when a taskId is available\n  useEffect(() => {\n    if (taskId) {\n      intervalRef.current = setInterval(checkStatus, 3000); // Poll every 3 seconds\n    }\n    // Cleanup function to clear the interval when the component unmounts\n    return () => clearInterval(intervalRef.current);\n  }, [taskId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"RAG-Based README Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a public GitHub repository URL to generate a README.md file.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"url\",\n          value: repoUrl,\n          onChange: e => setRepoUrl(e.target.value),\n          placeholder: \"https://github.com/user/repo\",\n          required: true,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          children: isLoading ? 'Generating...' : 'Generate README'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-text\",\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Generated README.md\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          readOnly: true,\n          value: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tMcMl6MS/j61cov5ZGYM6Iv14BE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_URL","App","_s","repoUrl","setRepoUrl","taskId","setTaskId","status","setStatus","result","setResult","error","setError","isLoading","setIsLoading","intervalRef","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","repo_url","ok","Error","data","json","task_id","err","message","checkStatus","errorData","catch","clearInterval","current","setInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","readOnly","_c","$RefreshReg$"],"sources":["/Users/kapoor/Desktop/bkk/GITHUB README GENRATOR/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// The URL of your backend API. Change this if your backend is deployed elsewhere.\nconst API_URL = 'http://localhost:8000'; \n\nfunction App() {\n  const [repoUrl, setRepoUrl] = useState('');\n  const [taskId, setTaskId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [result, setResult] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Use a ref to hold the interval ID\n  const intervalRef = useRef(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setResult('');\n    setTaskId(null);\n    setIsLoading(true);\n    setStatus('Submitting job...');\n\n    try {\n      const response = await fetch(`${API_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ repo_url: repoUrl }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start the generation job.');\n      }\n\n      const data = await response.json();\n      setTaskId(data.task_id);\n      setStatus('Job submitted. Waiting for progress...');\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      setStatus('Idle');\n    }\n  };\n\n  const checkStatus = async () => {\n    if (!taskId) return;\n\n    try {\n      const response = await fetch(`${API_URL}/status/${taskId}`);\n      if (!response.ok) {\n        // Try to extract error message from response\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData?.error || 'Failed to fetch status.');\n      }\n      const data = await response.json();\n\n      setStatus(`Job Status: ${data.status}`);\n\n      if (data.status === 'SUCCESS') {\n        setResult(data.result);\n        setIsLoading(false);\n        clearInterval(intervalRef.current); // Stop polling\n      } else if (data.status === 'FAILURE') {\n        setError(data?.error || 'Job failed. Please check the backend logs.');\n        setIsLoading(false);\n        clearInterval(intervalRef.current); // Stop polling\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to fetch status.');\n      setIsLoading(false);\n      clearInterval(intervalRef.current); // Stop polling on error\n    }\n  };\n\n  // useEffect hook to start polling when a taskId is available\n  useEffect(() => {\n    if (taskId) {\n      intervalRef.current = setInterval(checkStatus, 3000); // Poll every 3 seconds\n    }\n    // Cleanup function to clear the interval when the component unmounts\n    return () => clearInterval(intervalRef.current);\n  }, [taskId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>RAG-Based README Generator</h1>\n        <p>Enter a public GitHub repository URL to generate a README.md file.</p>\n      </header>\n      <main>\n        <form onSubmit={handleSubmit} className=\"form-container\">\n          <input\n            type=\"url\"\n            value={repoUrl}\n            onChange={(e) => setRepoUrl(e.target.value)}\n            placeholder=\"https://github.com/user/repo\"\n            required\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading}>\n            {isLoading ? 'Generating...' : 'Generate README'}\n          </button>\n        </form>\n\n        <div className=\"status-container\">\n          <h3>Status</h3>\n          <p className=\"status-text\">{status}</p>\n          {error && <p className=\"error-text\">Error: {error}</p>}\n        </div>\n\n        {result && (\n          <div className=\"result-container\">\n            <h3>Generated README.md</h3>\n            <textarea readOnly value={result}></textarea>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}