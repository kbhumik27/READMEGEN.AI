{"ast":null,"code":"var _jsxFileName = \"/Users/kapoor/Desktop/bkk/GITHUB README GENRATOR/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8000';\nfunction App() {\n  _s();\n  const [repoUrl, setRepoUrl] = useState('');\n  const [taskId, setTaskId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [result, setResult] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const intervalRef = useRef(null);\n\n  // --- NEW: Function to handle the download ---\n  const handleDownload = () => {\n    // Create a new Blob object from the README content\n    const blob = new Blob([result], {\n      type: 'text/markdown'\n    });\n\n    // Create a temporary URL for the blob\n    const url = URL.createObjectURL(blob);\n\n    // Create a temporary anchor element and set its attributes\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'README.md'; // This is the name of the downloaded file\n\n    // Append the link to the body, click it, and then remove it\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Clean up the temporary URL\n    URL.revokeObjectURL(url);\n  };\n  // --- END of new function ---\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setResult('');\n    setTaskId(null);\n    setIsLoading(true);\n    setStatus('Submitting job...');\n    try {\n      const response = await fetch(`${API_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          repo_url: repoUrl\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to start the generation job.');\n      }\n      const data = await response.json();\n      setTaskId(data.task_id);\n      setStatus('Job submitted. Waiting for progress...');\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      setStatus('Idle');\n    }\n  };\n  const checkStatus = async () => {\n    if (!taskId) return;\n    try {\n      const response = await fetch(`${API_URL}/status/${taskId}`);\n      const data = await response.json();\n      setStatus(`Job Status: ${data.status}`);\n      if (data.status === 'SUCCESS') {\n        setResult(data.result);\n        setIsLoading(false);\n        clearInterval(intervalRef.current);\n      } else if (data.status === 'FAILURE') {\n        setError('Job failed. Please check the backend logs or the result below.');\n        // Display the error traceback in the result box\n        setResult(data.result);\n        setIsLoading(false);\n        clearInterval(intervalRef.current);\n      }\n    } catch (err) {\n      setError('Failed to fetch status.');\n      setIsLoading(false);\n      clearInterval(intervalRef.current);\n    }\n  };\n  useEffect(() => {\n    if (taskId) {\n      intervalRef.current = setInterval(checkStatus, 3000);\n    }\n    return () => clearInterval(intervalRef.current);\n  }, [taskId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"RAG-Based README Generator \\uD83D\\uDCDD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a public GitHub repository URL to generate a README.md file.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"url\",\n          value: repoUrl,\n          onChange: e => setRepoUrl(e.target.value),\n          placeholder: \"https://github.com/user/repo\",\n          required: true,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isLoading,\n          children: isLoading ? 'Generating...' : 'Generate README'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"status-text\",\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Generated Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), !result.startsWith(\"TASK FAILED:\") && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDownload,\n            className: \"download-btn\",\n            children: \"Download README.md\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          readOnly: true,\n          value: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tMcMl6MS/j61cov5ZGYM6Iv14BE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_URL","App","_s","repoUrl","setRepoUrl","taskId","setTaskId","status","setStatus","result","setResult","error","setError","isLoading","setIsLoading","intervalRef","handleDownload","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleSubmit","e","preventDefault","response","fetch","method","headers","JSON","stringify","repo_url","ok","Error","data","json","task_id","err","message","checkStatus","clearInterval","current","setInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","required","disabled","startsWith","onClick","readOnly","_c","$RefreshReg$"],"sources":["/Users/kapoor/Desktop/bkk/GITHUB README GENRATOR/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst API_URL = 'http://localhost:8000'; \n\nfunction App() {\n  const [repoUrl, setRepoUrl] = useState('');\n  const [taskId, setTaskId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [result, setResult] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const intervalRef = useRef(null);\n\n  // --- NEW: Function to handle the download ---\n  const handleDownload = () => {\n    // Create a new Blob object from the README content\n    const blob = new Blob([result], { type: 'text/markdown' });\n\n    // Create a temporary URL for the blob\n    const url = URL.createObjectURL(blob);\n\n    // Create a temporary anchor element and set its attributes\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'README.md'; // This is the name of the downloaded file\n\n    // Append the link to the body, click it, and then remove it\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // Clean up the temporary URL\n    URL.revokeObjectURL(url);\n  };\n  // --- END of new function ---\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setResult('');\n    setTaskId(null);\n    setIsLoading(true);\n    setStatus('Submitting job...');\n\n    try {\n      const response = await fetch(`${API_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ repo_url: repoUrl }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to start the generation job.');\n      }\n\n      const data = await response.json();\n      setTaskId(data.task_id);\n      setStatus('Job submitted. Waiting for progress...');\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      setStatus('Idle');\n    }\n  };\n\n  const checkStatus = async () => {\n    if (!taskId) return;\n\n    try {\n      const response = await fetch(`${API_URL}/status/${taskId}`);\n      const data = await response.json();\n\n      setStatus(`Job Status: ${data.status}`);\n\n      if (data.status === 'SUCCESS') {\n        setResult(data.result);\n        setIsLoading(false);\n        clearInterval(intervalRef.current);\n      } else if (data.status === 'FAILURE') {\n        setError('Job failed. Please check the backend logs or the result below.');\n        // Display the error traceback in the result box\n        setResult(data.result); \n        setIsLoading(false);\n        clearInterval(intervalRef.current);\n      }\n    } catch (err) {\n      setError('Failed to fetch status.');\n      setIsLoading(false);\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  useEffect(() => {\n    if (taskId) {\n      intervalRef.current = setInterval(checkStatus, 3000);\n    }\n    return () => clearInterval(intervalRef.current);\n  }, [taskId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>RAG-Based README Generator 📝</h1>\n        <p>Enter a public GitHub repository URL to generate a README.md file.</p>\n      </header>\n      <main>\n        <form onSubmit={handleSubmit} className=\"form-container\">\n          <input\n            type=\"url\"\n            value={repoUrl}\n            onChange={(e) => setRepoUrl(e.target.value)}\n            placeholder=\"https://github.com/user/repo\"\n            required\n            disabled={isLoading}\n          />\n          <button type=\"submit\" disabled={isLoading}>\n            {isLoading ? 'Generating...' : 'Generate README'}\n          </button>\n        </form>\n\n        <div className=\"status-container\">\n          <h3>Status</h3>\n          <p className=\"status-text\">{status}</p>\n          {error && <p className=\"error-text\">Error: {error}</p>}\n        </div>\n\n        {result && (\n          <div className=\"result-container\">\n            <div className=\"result-header\">\n              <h3>Generated Content</h3>\n              {/* --- NEW: The Download Button --- */}\n              {/* It only shows if the task was a success and not an error */}\n              {!result.startsWith(\"TASK FAILED:\") && (\n                <button onClick={handleDownload} className=\"download-btn\">\n                  Download README.md\n                </button>\n              )}\n              {/* --- END of new button --- */}\n            </div>\n            <textarea readOnly value={result}></textarea>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}